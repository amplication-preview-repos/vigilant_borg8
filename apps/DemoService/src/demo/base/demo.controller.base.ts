/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DemoService } from "../demo.service";
import { DemoCreateInput } from "./DemoCreateInput";
import { Demo } from "./Demo";
import { DemoFindManyArgs } from "./DemoFindManyArgs";
import { DemoWhereUniqueInput } from "./DemoWhereUniqueInput";
import { DemoUpdateInput } from "./DemoUpdateInput";

export class DemoControllerBase {
  constructor(protected readonly service: DemoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Demo })
  async createDemo(@common.Body() data: DemoCreateInput): Promise<Demo> {
    return await this.service.createDemo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Demo] })
  @ApiNestedQuery(DemoFindManyArgs)
  async demos(@common.Req() request: Request): Promise<Demo[]> {
    const args = plainToClass(DemoFindManyArgs, request.query);
    return this.service.demos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Demo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async demo(
    @common.Param() params: DemoWhereUniqueInput
  ): Promise<Demo | null> {
    const result = await this.service.demo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Demo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDemo(
    @common.Param() params: DemoWhereUniqueInput,
    @common.Body() data: DemoUpdateInput
  ): Promise<Demo | null> {
    try {
      return await this.service.updateDemo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Demo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDemo(
    @common.Param() params: DemoWhereUniqueInput
  ): Promise<Demo | null> {
    try {
      return await this.service.deleteDemo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
